{"ast":null,"code":"import React,{useState}from'react';import TodoApp from'./TodoApp';// Your original ToDo list component\nimport Register from'./Register';import Login from'./Login';import{jsx as _jsx}from\"react/jsx-runtime\";function App(){// 1. State for Login Status (Will be set to true upon successful login)\nconst[isAuthenticated,setIsAuthenticated]=useState(false);// 2. State to control which form/view to show: 'login' (default) or 'register' or 'todo'\nconst[currentView,setCurrentView]=useState('login');// Function called by Login.js when login succeeds\nconst handleLoginSuccess=()=>{setIsAuthenticated(true);setCurrentView('todo');// Switch to the ToDo list\n};// Function called by Register.js when registration succeeds\nconst handleRegisterSuccess=()=>{setCurrentView('login');// After signing up, send them to the Login screen\n};// --- RENDER LOGIC ---\n// 1. If the user is authenticated, show the ToDo list.\nif(isAuthenticated){// NOTE: We will add a logout function later\nreturn/*#__PURE__*/_jsx(TodoApp,{});}// 2. If not authenticated, check which form to show.\nif(currentView==='register'){return/*#__PURE__*/_jsx(Register,{onSuccess:handleRegisterSuccess,onSwitchToLogin:()=>setCurrentView('login')// Button on Register page calls this\n});}// 3. Otherwise (if currentView is 'login' or default), show the Login page.\nreturn/*#__PURE__*/_jsx(Login,{onLoginSuccess:handleLoginSuccess,onSwitchToRegister:()=>setCurrentView('register')// Button on Login page calls this\n});}export default App;","map":{"version":3,"names":["React","useState","TodoApp","Register","Login","jsx","_jsx","App","isAuthenticated","setIsAuthenticated","currentView","setCurrentView","handleLoginSuccess","handleRegisterSuccess","onSuccess","onSwitchToLogin","onLoginSuccess","onSwitchToRegister"],"sources":["C:/Users/DEVI V/todo-backend/todo-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport TodoApp from './TodoApp'; // Your original ToDo list component\nimport Register from './Register'; \nimport Login from './Login'; \n\nfunction App() {\n    // 1. State for Login Status (Will be set to true upon successful login)\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    \n    // 2. State to control which form/view to show: 'login' (default) or 'register' or 'todo'\n    const [currentView, setCurrentView] = useState('login'); \n\n    // Function called by Login.js when login succeeds\n    const handleLoginSuccess = () => {\n        setIsAuthenticated(true); \n        setCurrentView('todo');    // Switch to the ToDo list\n    };\n    \n    // Function called by Register.js when registration succeeds\n    const handleRegisterSuccess = () => {\n        setCurrentView('login'); // After signing up, send them to the Login screen\n    }\n\n    // --- RENDER LOGIC ---\n    \n    // 1. If the user is authenticated, show the ToDo list.\n    if (isAuthenticated) {\n        // NOTE: We will add a logout function later\n        return <TodoApp />; \n    }\n\n    // 2. If not authenticated, check which form to show.\n    if (currentView === 'register') {\n        return (\n            <Register \n                onSuccess={handleRegisterSuccess} \n                onSwitchToLogin={() => setCurrentView('login')} // Button on Register page calls this\n            />\n        );\n    }\n    \n    // 3. Otherwise (if currentView is 'login' or default), show the Login page.\n    return (\n        <Login \n            onLoginSuccess={handleLoginSuccess}\n            onSwitchToRegister={() => setCurrentView('register')} // Button on Login page calls this\n        />\n    );\n}\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,OAAO,KAAM,WAAW,CAAE;AACjC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,MAAO,CAAAC,KAAK,KAAM,SAAS,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX;AACA,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CAE7D;AACA,KAAM,CAACS,WAAW,CAAEC,cAAc,CAAC,CAAGV,QAAQ,CAAC,OAAO,CAAC,CAEvD;AACA,KAAM,CAAAW,kBAAkB,CAAGA,CAAA,GAAM,CAC7BH,kBAAkB,CAAC,IAAI,CAAC,CACxBE,cAAc,CAAC,MAAM,CAAC,CAAK;AAC/B,CAAC,CAED;AACA,KAAM,CAAAE,qBAAqB,CAAGA,CAAA,GAAM,CAChCF,cAAc,CAAC,OAAO,CAAC,CAAE;AAC7B,CAAC,CAED;AAEA;AACA,GAAIH,eAAe,CAAE,CACjB;AACA,mBAAOF,IAAA,CAACJ,OAAO,GAAE,CAAC,CACtB,CAEA;AACA,GAAIQ,WAAW,GAAK,UAAU,CAAE,CAC5B,mBACIJ,IAAA,CAACH,QAAQ,EACLW,SAAS,CAAED,qBAAsB,CACjCE,eAAe,CAAEA,CAAA,GAAMJ,cAAc,CAAC,OAAO,CAAG;AAAA,CACnD,CAAC,CAEV,CAEA;AACA,mBACIL,IAAA,CAACF,KAAK,EACFY,cAAc,CAAEJ,kBAAmB,CACnCK,kBAAkB,CAAEA,CAAA,GAAMN,cAAc,CAAC,UAAU,CAAG;AAAA,CACzD,CAAC,CAEV,CAEA,cAAe,CAAAJ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}