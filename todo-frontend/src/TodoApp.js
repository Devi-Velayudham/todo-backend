import React, { useState, useEffect } from "react";
import "./TodoApp.css";

const BACKEND_URL = "https://todo-backend-sawo.onrender.com";

function TodoApp({ onLogout }) { 
Â  const [todos, setTodos] = useState([]);
Â  const [text, setText] = useState("");
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);

Â  // Helper function for all authenticated fetches (Updated for correct header merging)
Â  const authenticatedFetch = async (url, options = {}) => {
Â  Â  // 1. Define default headers and credentials
Â  Â  const defaultHeaders = { 
Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  };

Â  Â  // 2. Merge user-provided options with defaults, ensuring credentials and method are prioritized
Â  Â  const fetchOptions = {
Â  Â  Â  Â  // Always include credentials for secure cookie transfer
Â  Â  Â  Â  credentials: 'include', 
Â  Â  Â  Â  
Â  Â  Â  Â  // Merge default headers with any custom headers passed in options
Â  Â  Â  Â  headers: { 
Â  Â  Â  Â  Â  Â  ...defaultHeaders,
Â  Â  Â  Â  Â  Â  ...options.headers 
Â  Â  Â  Â  },
Â  Â  Â  Â  
Â  Â  Â  Â  // Spread remaining options (like method, body, etc.)
Â  Â  Â  Â  ...options 
Â  Â  };
    // We must delete the inner 'headers' from the spread options so it doesn't
    // override the full headers object we just created.
    delete fetchOptions.headers; 


Â  Â  const response = await fetch(url, { ...fetchOptions, headers: fetchOptions.headers });
Â  Â  
Â  Â  // Check for 401 on every authenticated request
Â  Â  if (response.status === 401) {
Â  Â  Â  Â  console.error("Authentication failed during CRUD operation (401). Logging out user.");
Â  Â  Â  Â  onLogout(); 
Â  Â  Â  Â  throw new Error("Unauthorized"); 
Â  Â  }

Â  Â  return response;
Â  }
    
Â  // Function to fetch todos and include credentials
Â  const fetchTodos = async () => {
Â  Â  setError(null);
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  // Use the authenticatedFetch for GET request
Â  Â  Â  const response = await authenticatedFetch(`${BACKEND_URL}/todos`, {
Â  Â  Â  Â  method: "GET",
        // Note: We don't need to specify credentials or headers here, 
        // as authenticatedFetch handles it.
Â  Â  Â  });

Â  Â  Â  // The 401 check is now inside authenticatedFetch, so we check for the response status.
Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  throw new Error(`HTTP error! status: ${response.status}`);
Â  Â  Â  }

Â  Â  Â  const data = await response.json();
Â  Â  Â  setTodos(data);

Â  Â  } catch (err) {
Â  Â  Â  console.error("Error fetching todos:", err);
Â  Â  Â  // Check if the error was the "Unauthorized" thrown by authenticatedFetch
Â  Â  Â  if (err.message !== "Unauthorized") {
Â  Â  Â  Â  Â  // If it wasn't a log out, then display the error
Â  Â  Â  Â  Â  setError("Failed to load todos. You may need to log in again.");
Â  Â  Â  }
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // Initial fetch on component mount
Â  useEffect(() => {
Â  Â  fetchTodos();
Â  }, []); 


Â  // --- CRUD Functions ---

Â  const addTodo = async () => {
Â  Â  if (!text) return;
Â  Â  const todoText = text;
Â  Â  setText(""); // Clear input immediately
Â  Â  
Â  Â  try {
Â  Â  Â  // Uses authenticatedFetch which correctly includes credentials and Content-Type
Â  Â  Â  const response = await authenticatedFetch(`${BACKEND_URL}/todos`, {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  body: JSON.stringify({ text: todoText })
Â  Â  Â  });
Â  Â  Â  
Â  Â  Â  if (!response.ok) throw new Error("Failed to add todo.");
Â  Â  Â  
Â  Â  Â  const newTodo = await response.json();
Â  Â  Â  setTodos((prevTodos) => [...prevTodos, newTodo]);
Â  Â  
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error adding todo:", err);
Â  Â  Â  if (err.message !== "Unauthorized") {
Â  Â  Â  Â  Â  setError("Could not add todo.");
Â  Â  Â  Â  Â  setText(todoText); // Restore text if save failed
Â  Â  Â  }
Â  Â  }
Â  };

Â  const toggleComplete = async (id, completed) => {
Â  Â  try {
Â  Â  Â  // Uses authenticatedFetch which correctly includes credentials and Content-Type
Â  Â  Â  const response = await authenticatedFetch(`${BACKEND_URL}/todos/${id}`, {
Â  Â  Â  Â  method: "PUT",
Â  Â  Â  Â  body: JSON.stringify({ completed: !completed }) // Toggle the value
Â  Â  Â  });

Â  Â  Â  if (!response.ok) throw new Error("Failed to toggle todo.");

Â  Â  Â  const updatedTodo = await response.json();
Â  Â  Â  setTodos(todos.map(t => (t._id === id ? updatedTodo : t)));

Â  Â  } catch (err) {
Â  Â  Â  console.error("Error toggling todo:", err);
Â  Â  Â  Â if (err.message !== "Unauthorized") {
Â  Â  Â  Â  Â  Â setError("Could not update todo status.");
Â  Â  Â  Â }
Â  Â  }
Â  };

Â  const deleteTodo = async (id) => {
Â  Â  try {
Â  Â  Â  // Uses authenticatedFetch which correctly includes credentials and Content-Type
Â  Â  Â  const response = await authenticatedFetch(`${BACKEND_URL}/todos/${id}`, { 
Â  Â  Â  Â  method: "DELETE" 
Â  Â  Â  });

Â  Â  Â  if (!response.ok) throw new Error("Failed to delete todo.");

Â  Â  Â  setTodos(todos.filter(t => t._id !== id));
Â  Â  Â  
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error deleting todo:", err);
Â  Â  Â  Â if (err.message !== "Unauthorized") {
Â  Â  Â  Â  Â  Â setError("Could not delete todo.");
Â  Â  Â  Â }
Â  Â  }
Â  };

Â  // --- Render Logic ---

Â  if (loading) {
Â  Â  return (
Â  Â  Â  <div className="app">
Â  Â  Â  Â  <div className="todo-container">
Â  Â  Â  Â  Â  <h1>ðŸŒŸ My Todo List</h1>
Â  Â  Â  Â  Â  <p>Loading your list...</p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (error) {
Â  Â  return (
Â  Â  Â  <div className="app">
Â  Â  Â  Â  <div className="todo-container">
Â  Â  Â  Â  Â  <h1>ðŸŒŸ My Todo List</h1>
Â  Â  Â  Â  Â  <p style={{ color: 'red' }}>Error: {error}</p>
Â  Â  Â  Â  Â  <button onClick={fetchTodos} className="mt-4">Try Again</button>
Â  Â  Â  Â  Â  <button onClick={onLogout} style={{ marginTop: '10px' }}>Go to Login</button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="app">
Â  Â  Â  <div className="todo-container">
Â  Â  Â  Â  <h1>ðŸŒŸ My Todo List</h1>

Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  onClick={onLogout} 
Â  Â  Â  Â  Â  Â  style={{ position: 'absolute', top: '10px', right: '10px', padding: '8px 15px', borderRadius: '5px', backgroundColor: '#f44336', color: 'white', border: 'none', cursor: 'pointer' }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Log Out
Â  Â  Â  Â  </button> 

Â  Â  Â  Â  <div className="input-section">
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  value={text}
Â  Â  Â  Â  Â  Â  onChange={e => setText(e.target.value)}
Â  Â  Â  Â  Â  Â  placeholder="Enter a new todo"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <button onClick={addTodo}>âž• Add</button>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <ul>
Â  Â  Â  Â  Â  {todos.map(todo => (
Â  Â  Â  Â  Â  Â  <li key={todo._id} className={todo.completed ? "completed" : ""}>
Â  Â  Â  Â  Â  Â  Â  <span>{todo.text}</span>
Â  Â  Â  Â  Â  Â  Â  <div className="actions">
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => toggleComplete(todo._id, todo.completed)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {todo.completed ? "â†© Undo" : "âœ” Done"}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <button className="delete" onClick={() => deleteTodo(todo._id)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ðŸ—‘ Delete
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </ul>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}

export default TodoApp;
